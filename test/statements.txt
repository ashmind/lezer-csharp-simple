# Variable declaration

var a = 1;

==>

Root(Keyword,Identifier,Punctuation,Number,Punctuation)

# If statement

if (x) f1(); else f2();

==>

Root(Keyword,Punctuation,Identifier,Punctuation,Identifier,Punctuation,Punctuation,Punctuation,Keyword,Identifier,Punctuation,Punctuation,Punctuation)

# While loop

while (true) {
  break;
  continue;
}

==>

Root(
  Keyword,Punctuation,Keyword,Punctuation,Block(Punctuation,
    Keyword,Punctuation,
    Keyword,Punctuation,
  Punctuation))

# Label

foo: while(true) break foo;

==>

Root(Identifier,Punctuation,Keyword,Punctuation,Keyword,Punctuation,Keyword,Identifier,Punctuation)

# Try

try { throw new Exception(); } catch {}
try { 1; } catch (x) { 2; } finally { 3; }

==>

Root(
  Keyword,Block(Punctuation,Keyword,Keyword,Identifier,Punctuation,Punctuation,Punctuation,Punctuation),Keyword,Block(Punctuation,Punctuation),
  Keyword,Block(Punctuation,Number,Punctuation,Punctuation),Keyword,Punctuation,Identifier,Punctuation,Block(Punctuation,Number,Punctuation,Punctuation),Keyword,Block(Punctuation,Number,Punctuation,Punctuation))

# Switch

switch (x) {
  case 1:
    return true;
  case 2:
    return false;
  default:
    break;
}

==>

Root(
  Keyword,Punctuation,Identifier,Punctuation, Block(Punctuation,
    Keyword,Number,Punctuation,
    Keyword,Keyword,Punctuation,
    Keyword,Number,Punctuation,
    Keyword,Keyword,Punctuation,
    Keyword,Punctuation,
    Keyword,Punctuation,
  Punctuation))

# For

for (var x = 1; x < 10; x++) {}

==>

Root(Keyword,Punctuation,Keyword,Identifier,Punctuation,Number,Punctuation,Identifier,Punctuation,Number,Punctuation,Identifier,Punctuation,Punctuation,Block(Punctuation,Punctuation))

# Foreach

foreach (var x in xs) {}

==>

Root(Keyword,Punctuation,Keyword,Identifier,Keyword,Identifier,Punctuation,Block(Punctuation,Punctuation))

# Yield

yield 1;

==>

Root(Keyword,Number,Punctuation)

# Empty statements

;;;

==>

Root(Punctuation,Punctuation,Punctuation)

# Comments

/* a */
one;

/* b **/
two;

/* c ***/
three;

/* d

***/
four;

y // comment
  * z;

==>

Root(
  Comment,Identifier,Punctuation,
  Comment,Identifier,Punctuation,
  Comment,Identifier,Punctuation,
  Comment,Identifier,Punctuation,
  Identifier,Comment,Punctuation,Identifier,Punctuation)
